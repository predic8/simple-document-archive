def imageName = 'p8/document-archive'
project.ext.imageName = imageName

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.3'
    }
}

apply plugin: 'com.bmuschko.docker-remote-api'

if (new File("dockerimage.gradle").exists()) {
	apply from: "dockerimage.gradle"
} else {
	apply from: "../dockerimage.gradle"
}

task copyShell(type: Copy) {
	from project.projectDir
	into "${project.buildDir}/generated"
	include '*.xml'
    include 'src'
}

task createDockerfile(type: com.bmuschko.gradle.docker.tasks.image.Dockerfile) {
	dependsOn copyShell
    destFile = project.file("${project.buildDir}/generated/Dockerfile")
	destFile.parentFile.mkdirs()
    from 'maven:3.5.0-jdk-8-alpine'
    addFile('.', '/usr/src/app')
    workingDir('/usr/src/app')
    runCommand('mvn -q install')
    runCommand('mv target/document-archive.jar .')
    runCommand('rm -r src/ target/ pom.xml')
    defaultCommand('java -jar document-archive.jar')
}

dockerBase {
	dir file("${project.buildDir}/generated")
}

afterEvaluate {
	testDockerImage.dependsOn dockerPushImage
}

def deploymentName = 'p8-document-archive'
project.ext.deploymentName = deploymentName

task testDockerImage() {
	doLast {
	}
}

if (new File("deployment.gradle").exists()) {
	apply from: "deployment.gradle"
} else {
	apply from: "../deployment.gradle"
}

deployment {
	descriptor([
			kind: "Deployment",
			apiVersion: "extensions/v1beta1",
			metadata: [ name: "$deploymentName" ],
			spec: [
				template: [
					metadata: [ labels: [ app: "$deploymentName" ] ],
					spec: [
						containers: [ [
							image: "${imageName}:${project.ext.version}",
							name: "${deploymentName}",
						] ]
					]
				]
			]
		])
	clusterUrl "https://congo.predic8.de:8443"
}
